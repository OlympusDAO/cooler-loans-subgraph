// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deactivated extends ethereum.Event {
  get params(): Deactivated__Params {
    return new Deactivated__Params(this);
  }
}

export class Deactivated__Params {
  _event: Deactivated;

  constructor(event: Deactivated) {
    this._event = event;
  }
}

export class Reactivated extends ethereum.Event {
  get params(): Reactivated__Params {
    return new Reactivated__Params(this);
  }
}

export class Reactivated__Params {
  _event: Reactivated;

  constructor(event: Reactivated) {
    this._event = event;
  }
}

export class Clearinghouse__requestPermissionsResultRequestsStruct extends ethereum.Tuple {
  get keycode(): Bytes {
    return this[0].toBytes();
  }

  get funcSelector(): Bytes {
    return this[1].toBytes();
  }
}

export class Clearinghouse extends ethereum.SmartContract {
  static bind(address: Address): Clearinghouse {
    return new Clearinghouse("Clearinghouse", address);
  }

  DURATION(): BigInt {
    let result = super.call("DURATION", "DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DURATION", "DURATION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  FUND_AMOUNT(): BigInt {
    let result = super.call("FUND_AMOUNT", "FUND_AMOUNT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FUND_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FUND_AMOUNT", "FUND_AMOUNT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  FUND_CADENCE(): BigInt {
    let result = super.call("FUND_CADENCE", "FUND_CADENCE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FUND_CADENCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FUND_CADENCE", "FUND_CADENCE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  INTEREST_RATE(): BigInt {
    let result = super.call("INTEREST_RATE", "INTEREST_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INTEREST_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INTEREST_RATE",
      "INTEREST_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LOAN_TO_COLLATERAL(): BigInt {
    let result = super.call(
      "LOAN_TO_COLLATERAL",
      "LOAN_TO_COLLATERAL():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LOAN_TO_COLLATERAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LOAN_TO_COLLATERAL",
      "LOAN_TO_COLLATERAL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_REWARD(): BigInt {
    let result = super.call("MAX_REWARD", "MAX_REWARD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_REWARD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_REWARD", "MAX_REWARD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINTR(): Address {
    let result = super.call("MINTR", "MINTR():(address)", []);

    return result[0].toAddress();
  }

  try_MINTR(): ethereum.CallResult<Address> {
    let result = super.tryCall("MINTR", "MINTR():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ROLES(): Address {
    let result = super.call("ROLES", "ROLES():(address)", []);

    return result[0].toAddress();
  }

  try_ROLES(): ethereum.CallResult<Address> {
    let result = super.tryCall("ROLES", "ROLES():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TRSRY(): Address {
    let result = super.call("TRSRY", "TRSRY():(address)", []);

    return result[0].toAddress();
  }

  try_TRSRY(): ethereum.CallResult<Address> {
    let result = super.tryCall("TRSRY", "TRSRY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  active(): boolean {
    let result = super.call("active", "active():(bool)", []);

    return result[0].toBoolean();
  }

  try_active(): ethereum.CallResult<boolean> {
    let result = super.tryCall("active", "active():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  configureDependencies(): Array<Bytes> {
    let result = super.call(
      "configureDependencies",
      "configureDependencies():(bytes5[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_configureDependencies(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "configureDependencies",
      "configureDependencies():(bytes5[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  dai(): Address {
    let result = super.call("dai", "dai():(address)", []);

    return result[0].toAddress();
  }

  try_dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("dai", "dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  debtForCollateral(collateral_: BigInt): BigInt {
    let result = super.call(
      "debtForCollateral",
      "debtForCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(collateral_)]
    );

    return result[0].toBigInt();
  }

  try_debtForCollateral(collateral_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtForCollateral",
      "debtForCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(collateral_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundTime(): BigInt {
    let result = super.call("fundTime", "fundTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundTime", "fundTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gOHM(): Address {
    let result = super.call("gOHM", "gOHM():(address)", []);

    return result[0].toAddress();
  }

  try_gOHM(): ethereum.CallResult<Address> {
    let result = super.tryCall("gOHM", "gOHM():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interestFromDebt(debt_: BigInt): BigInt {
    let result = super.call(
      "interestFromDebt",
      "interestFromDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(debt_)]
    );

    return result[0].toBigInt();
  }

  try_interestFromDebt(debt_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestFromDebt",
      "interestFromDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(debt_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(): boolean {
    let result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCoolerCallback(): boolean {
    let result = super.call(
      "isCoolerCallback",
      "isCoolerCallback():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isCoolerCallback(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCoolerCallback",
      "isCoolerCallback():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    let result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    let result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lendToCooler(cooler_: Address, amount_: BigInt): BigInt {
    let result = super.call(
      "lendToCooler",
      "lendToCooler(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cooler_),
        ethereum.Value.fromUnsignedBigInt(amount_)
      ]
    );

    return result[0].toBigInt();
  }

  try_lendToCooler(
    cooler_: Address,
    amount_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lendToCooler",
      "lendToCooler(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cooler_),
        ethereum.Value.fromUnsignedBigInt(amount_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalance(): boolean {
    let result = super.call("rebalance", "rebalance():(bool)", []);

    return result[0].toBoolean();
  }

  try_rebalance(): ethereum.CallResult<boolean> {
    let result = super.tryCall("rebalance", "rebalance():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  receivables(): BigInt {
    let result = super.call("receivables", "receivables():(uint256)", []);

    return result[0].toBigInt();
  }

  try_receivables(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("receivables", "receivables():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestPermissions(): Array<
    Clearinghouse__requestPermissionsResultRequestsStruct
  > {
    let result = super.call(
      "requestPermissions",
      "requestPermissions():((bytes5,bytes4)[])",
      []
    );

    return result[0].toTupleArray<
      Clearinghouse__requestPermissionsResultRequestsStruct
    >();
  }

  try_requestPermissions(): ethereum.CallResult<
    Array<Clearinghouse__requestPermissionsResultRequestsStruct>
  > {
    let result = super.tryCall(
      "requestPermissions",
      "requestPermissions():((bytes5,bytes4)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Clearinghouse__requestPermissionsResultRequestsStruct
      >()
    );
  }

  sdai(): Address {
    let result = super.call("sdai", "sdai():(address)", []);

    return result[0].toAddress();
  }

  try_sdai(): ethereum.CallResult<Address> {
    let result = super.tryCall("sdai", "sdai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  staking(): Address {
    let result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    let result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get gohm_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get staking_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sdai_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get coolerFactory_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get kernel_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeKernelCall extends ethereum.Call {
  get inputs(): ChangeKernelCall__Inputs {
    return new ChangeKernelCall__Inputs(this);
  }

  get outputs(): ChangeKernelCall__Outputs {
    return new ChangeKernelCall__Outputs(this);
  }
}

export class ChangeKernelCall__Inputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }

  get newKernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeKernelCall__Outputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }
}

export class ClaimDefaultedCall extends ethereum.Call {
  get inputs(): ClaimDefaultedCall__Inputs {
    return new ClaimDefaultedCall__Inputs(this);
  }

  get outputs(): ClaimDefaultedCall__Outputs {
    return new ClaimDefaultedCall__Outputs(this);
  }
}

export class ClaimDefaultedCall__Inputs {
  _call: ClaimDefaultedCall;

  constructor(call: ClaimDefaultedCall) {
    this._call = call;
  }

  get coolers_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get loans_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ClaimDefaultedCall__Outputs {
  _call: ClaimDefaultedCall;

  constructor(call: ClaimDefaultedCall) {
    this._call = call;
  }
}

export class ConfigureDependenciesCall extends ethereum.Call {
  get inputs(): ConfigureDependenciesCall__Inputs {
    return new ConfigureDependenciesCall__Inputs(this);
  }

  get outputs(): ConfigureDependenciesCall__Outputs {
    return new ConfigureDependenciesCall__Outputs(this);
  }
}

export class ConfigureDependenciesCall__Inputs {
  _call: ConfigureDependenciesCall;

  constructor(call: ConfigureDependenciesCall) {
    this._call = call;
  }
}

export class ConfigureDependenciesCall__Outputs {
  _call: ConfigureDependenciesCall;

  constructor(call: ConfigureDependenciesCall) {
    this._call = call;
  }

  get dependencies(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class DefundCall extends ethereum.Call {
  get inputs(): DefundCall__Inputs {
    return new DefundCall__Inputs(this);
  }

  get outputs(): DefundCall__Outputs {
    return new DefundCall__Outputs(this);
  }
}

export class DefundCall__Inputs {
  _call: DefundCall;

  constructor(call: DefundCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DefundCall__Outputs {
  _call: DefundCall;

  constructor(call: DefundCall) {
    this._call = call;
  }
}

export class EmergencyShutdownCall extends ethereum.Call {
  get inputs(): EmergencyShutdownCall__Inputs {
    return new EmergencyShutdownCall__Inputs(this);
  }

  get outputs(): EmergencyShutdownCall__Outputs {
    return new EmergencyShutdownCall__Outputs(this);
  }
}

export class EmergencyShutdownCall__Inputs {
  _call: EmergencyShutdownCall;

  constructor(call: EmergencyShutdownCall) {
    this._call = call;
  }
}

export class EmergencyShutdownCall__Outputs {
  _call: EmergencyShutdownCall;

  constructor(call: EmergencyShutdownCall) {
    this._call = call;
  }
}

export class LendToCoolerCall extends ethereum.Call {
  get inputs(): LendToCoolerCall__Inputs {
    return new LendToCoolerCall__Inputs(this);
  }

  get outputs(): LendToCoolerCall__Outputs {
    return new LendToCoolerCall__Outputs(this);
  }
}

export class LendToCoolerCall__Inputs {
  _call: LendToCoolerCall;

  constructor(call: LendToCoolerCall) {
    this._call = call;
  }

  get cooler_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LendToCoolerCall__Outputs {
  _call: LendToCoolerCall;

  constructor(call: LendToCoolerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnDefaultCall extends ethereum.Call {
  get inputs(): OnDefaultCall__Inputs {
    return new OnDefaultCall__Inputs(this);
  }

  get outputs(): OnDefaultCall__Outputs {
    return new OnDefaultCall__Outputs(this);
  }
}

export class OnDefaultCall__Inputs {
  _call: OnDefaultCall;

  constructor(call: OnDefaultCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get debt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnDefaultCall__Outputs {
  _call: OnDefaultCall;

  constructor(call: OnDefaultCall) {
    this._call = call;
  }
}

export class OnRepayCall extends ethereum.Call {
  get inputs(): OnRepayCall__Inputs {
    return new OnRepayCall__Inputs(this);
  }

  get outputs(): OnRepayCall__Outputs {
    return new OnRepayCall__Outputs(this);
  }
}

export class OnRepayCall__Inputs {
  _call: OnRepayCall;

  constructor(call: OnRepayCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OnRepayCall__Outputs {
  _call: OnRepayCall;

  constructor(call: OnRepayCall) {
    this._call = call;
  }
}

export class OnRollCall extends ethereum.Call {
  get inputs(): OnRollCall__Inputs {
    return new OnRollCall__Inputs(this);
  }

  get outputs(): OnRollCall__Outputs {
    return new OnRollCall__Outputs(this);
  }
}

export class OnRollCall__Inputs {
  _call: OnRollCall;

  constructor(call: OnRollCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newDebt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newCollateral(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnRollCall__Outputs {
  _call: OnRollCall;

  constructor(call: OnRollCall) {
    this._call = call;
  }
}

export class ReactivateCall extends ethereum.Call {
  get inputs(): ReactivateCall__Inputs {
    return new ReactivateCall__Inputs(this);
  }

  get outputs(): ReactivateCall__Outputs {
    return new ReactivateCall__Outputs(this);
  }
}

export class ReactivateCall__Inputs {
  _call: ReactivateCall;

  constructor(call: ReactivateCall) {
    this._call = call;
  }
}

export class ReactivateCall__Outputs {
  _call: ReactivateCall;

  constructor(call: ReactivateCall) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RollLoanCall extends ethereum.Call {
  get inputs(): RollLoanCall__Inputs {
    return new RollLoanCall__Inputs(this);
  }

  get outputs(): RollLoanCall__Outputs {
    return new RollLoanCall__Outputs(this);
  }
}

export class RollLoanCall__Inputs {
  _call: RollLoanCall;

  constructor(call: RollLoanCall) {
    this._call = call;
  }

  get cooler_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get loanID_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RollLoanCall__Outputs {
  _call: RollLoanCall;

  constructor(call: RollLoanCall) {
    this._call = call;
  }
}

export class SweepIntoDSRCall extends ethereum.Call {
  get inputs(): SweepIntoDSRCall__Inputs {
    return new SweepIntoDSRCall__Inputs(this);
  }

  get outputs(): SweepIntoDSRCall__Outputs {
    return new SweepIntoDSRCall__Outputs(this);
  }
}

export class SweepIntoDSRCall__Inputs {
  _call: SweepIntoDSRCall;

  constructor(call: SweepIntoDSRCall) {
    this._call = call;
  }
}

export class SweepIntoDSRCall__Outputs {
  _call: SweepIntoDSRCall;

  constructor(call: SweepIntoDSRCall) {
    this._call = call;
  }
}
