// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Cooler__claimDefaultedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class Cooler__getLoanResultValue0Struct extends ethereum.Tuple {
  get request(): Cooler__getLoanResultValue0RequestStruct {
    return changetype<Cooler__getLoanResultValue0RequestStruct>(
      this[0].toTuple()
    );
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get unclaimed(): BigInt {
    return this[2].toBigInt();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get lender(): Address {
    return this[5].toAddress();
  }

  get repayDirect(): boolean {
    return this[6].toBoolean();
  }

  get callback(): boolean {
    return this[7].toBoolean();
  }
}

export class Cooler__getLoanResultValue0RequestStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get interest(): BigInt {
    return this[1].toBigInt();
  }

  get loanToCollateral(): BigInt {
    return this[2].toBigInt();
  }

  get duration(): BigInt {
    return this[3].toBigInt();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class Cooler__getRequestResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get interest(): BigInt {
    return this[1].toBigInt();
  }

  get loanToCollateral(): BigInt {
    return this[2].toBigInt();
  }

  get duration(): BigInt {
    return this[3].toBigInt();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class Cooler__loansResultRequestStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get interest(): BigInt {
    return this[1].toBigInt();
  }

  get loanToCollateral(): BigInt {
    return this[2].toBigInt();
  }

  get duration(): BigInt {
    return this[3].toBigInt();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class Cooler__loansResult {
  value0: Cooler__loansResultRequestStruct;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: boolean;
  value7: boolean;

  constructor(
    value0: Cooler__loansResultRequestStruct,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: boolean,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getRequest(): Cooler__loansResultRequestStruct {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getUnclaimed(): BigInt {
    return this.value2;
  }

  getCollateral(): BigInt {
    return this.value3;
  }

  getExpiry(): BigInt {
    return this.value4;
  }

  getLender(): Address {
    return this.value5;
  }

  getRepayDirect(): boolean {
    return this.value6;
  }

  getCallback(): boolean {
    return this.value7;
  }
}

export class Cooler__requestsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getInterest(): BigInt {
    return this.value1;
  }

  getLoanToCollateral(): BigInt {
    return this.value2;
  }

  getDuration(): BigInt {
    return this.value3;
  }

  getActive(): boolean {
    return this.value4;
  }
}

export class Cooler extends ethereum.SmartContract {
  static bind(address: Address): Cooler {
    return new Cooler("Cooler", address);
  }

  approvals(param0: BigInt): Address {
    let result = super.call("approvals", "approvals(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_approvals(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("approvals", "approvals(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimDefaulted(loanID_: BigInt): Cooler__claimDefaultedResult {
    let result = super.call(
      "claimDefaulted",
      "claimDefaulted(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(loanID_)]
    );

    return new Cooler__claimDefaultedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_claimDefaulted(
    loanID_: BigInt
  ): ethereum.CallResult<Cooler__claimDefaultedResult> {
    let result = super.tryCall(
      "claimDefaulted",
      "claimDefaulted(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(loanID_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cooler__claimDefaultedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  clearRequest(
    reqID_: BigInt,
    repayDirect_: boolean,
    isCallback_: boolean
  ): BigInt {
    let result = super.call(
      "clearRequest",
      "clearRequest(uint256,bool,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(reqID_),
        ethereum.Value.fromBoolean(repayDirect_),
        ethereum.Value.fromBoolean(isCallback_)
      ]
    );

    return result[0].toBigInt();
  }

  try_clearRequest(
    reqID_: BigInt,
    repayDirect_: boolean,
    isCallback_: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "clearRequest",
      "clearRequest(uint256,bool,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(reqID_),
        ethereum.Value.fromBoolean(repayDirect_),
        ethereum.Value.fromBoolean(isCallback_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralFor(amount_: BigInt, loanToCollateral_: BigInt): BigInt {
    let result = super.call(
      "collateralFor",
      "collateralFor(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(loanToCollateral_)
      ]
    );

    return result[0].toBigInt();
  }

  try_collateralFor(
    amount_: BigInt,
    loanToCollateral_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralFor",
      "collateralFor(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(loanToCollateral_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debt(): Address {
    let result = super.call("debt", "debt():(address)", []);

    return result[0].toAddress();
  }

  try_debt(): ethereum.CallResult<Address> {
    let result = super.tryCall("debt", "debt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLoan(loanID_: BigInt): Cooler__getLoanResultValue0Struct {
    let result = super.call(
      "getLoan",
      "getLoan(uint256):(((uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,address,bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(loanID_)]
    );

    return changetype<Cooler__getLoanResultValue0Struct>(result[0].toTuple());
  }

  try_getLoan(
    loanID_: BigInt
  ): ethereum.CallResult<Cooler__getLoanResultValue0Struct> {
    let result = super.tryCall(
      "getLoan",
      "getLoan(uint256):(((uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,address,bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(loanID_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Cooler__getLoanResultValue0Struct>(value[0].toTuple())
    );
  }

  getRequest(reqID_: BigInt): Cooler__getRequestResultValue0Struct {
    let result = super.call(
      "getRequest",
      "getRequest(uint256):((uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(reqID_)]
    );

    return changetype<Cooler__getRequestResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getRequest(
    reqID_: BigInt
  ): ethereum.CallResult<Cooler__getRequestResultValue0Struct> {
    let result = super.tryCall(
      "getRequest",
      "getRequest(uint256):((uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(reqID_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Cooler__getRequestResultValue0Struct>(value[0].toTuple())
    );
  }

  interestFor(amount_: BigInt, rate_: BigInt, duration_: BigInt): BigInt {
    let result = super.call(
      "interestFor",
      "interestFor(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(rate_),
        ethereum.Value.fromUnsignedBigInt(duration_)
      ]
    );

    return result[0].toBigInt();
  }

  try_interestFor(
    amount_: BigInt,
    rate_: BigInt,
    duration_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestFor",
      "interestFor(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(rate_),
        ethereum.Value.fromUnsignedBigInt(duration_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(reqID_: BigInt): boolean {
    let result = super.call("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(reqID_)
    ]);

    return result[0].toBoolean();
  }

  try_isActive(reqID_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(reqID_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDefaulted(loanID_: BigInt): boolean {
    let result = super.call("isDefaulted", "isDefaulted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(loanID_)
    ]);

    return result[0].toBoolean();
  }

  try_isDefaulted(loanID_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDefaulted", "isDefaulted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(loanID_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loans(param0: BigInt): Cooler__loansResult {
    let result = super.call(
      "loans",
      "loans(uint256):((uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,address,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return changetype<Cooler__loansResult>(
      new Cooler__loansResult(
        changetype<Cooler__loansResultRequestStruct>(result[0].toTuple()),
        result[1].toBigInt(),
        result[2].toBigInt(),
        result[3].toBigInt(),
        result[4].toBigInt(),
        result[5].toAddress(),
        result[6].toBoolean(),
        result[7].toBoolean()
      )
    );
  }

  try_loans(param0: BigInt): ethereum.CallResult<Cooler__loansResult> {
    let result = super.tryCall(
      "loans",
      "loans(uint256):((uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,address,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Cooler__loansResult>(
        new Cooler__loansResult(
          changetype<Cooler__loansResultRequestStruct>(value[0].toTuple()),
          value[1].toBigInt(),
          value[2].toBigInt(),
          value[3].toBigInt(),
          value[4].toBigInt(),
          value[5].toAddress(),
          value[6].toBoolean(),
          value[7].toBoolean()
        )
      )
    );
  }

  newCollateralFor(loanID_: BigInt): BigInt {
    let result = super.call(
      "newCollateralFor",
      "newCollateralFor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(loanID_)]
    );

    return result[0].toBigInt();
  }

  try_newCollateralFor(loanID_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "newCollateralFor",
      "newCollateralFor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(loanID_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  repayLoan(loanID_: BigInt, repaid_: BigInt): BigInt {
    let result = super.call(
      "repayLoan",
      "repayLoan(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(loanID_),
        ethereum.Value.fromUnsignedBigInt(repaid_)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayLoan(loanID_: BigInt, repaid_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayLoan",
      "repayLoan(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(loanID_),
        ethereum.Value.fromUnsignedBigInt(repaid_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestLoan(
    amount_: BigInt,
    interest_: BigInt,
    loanToCollateral_: BigInt,
    duration_: BigInt
  ): BigInt {
    let result = super.call(
      "requestLoan",
      "requestLoan(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(interest_),
        ethereum.Value.fromUnsignedBigInt(loanToCollateral_),
        ethereum.Value.fromUnsignedBigInt(duration_)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestLoan(
    amount_: BigInt,
    interest_: BigInt,
    loanToCollateral_: BigInt,
    duration_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestLoan",
      "requestLoan(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(interest_),
        ethereum.Value.fromUnsignedBigInt(loanToCollateral_),
        ethereum.Value.fromUnsignedBigInt(duration_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requests(param0: BigInt): Cooler__requestsResult {
    let result = super.call(
      "requests",
      "requests(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Cooler__requestsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_requests(param0: BigInt): ethereum.CallResult<Cooler__requestsResult> {
    let result = super.tryCall(
      "requests",
      "requests(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cooler__requestsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }
}

export class ApproveTransferCall extends ethereum.Call {
  get inputs(): ApproveTransferCall__Inputs {
    return new ApproveTransferCall__Inputs(this);
  }

  get outputs(): ApproveTransferCall__Outputs {
    return new ApproveTransferCall__Outputs(this);
  }
}

export class ApproveTransferCall__Inputs {
  _call: ApproveTransferCall;

  constructor(call: ApproveTransferCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get loanID_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveTransferCall__Outputs {
  _call: ApproveTransferCall;

  constructor(call: ApproveTransferCall) {
    this._call = call;
  }
}

export class ClaimDefaultedCall extends ethereum.Call {
  get inputs(): ClaimDefaultedCall__Inputs {
    return new ClaimDefaultedCall__Inputs(this);
  }

  get outputs(): ClaimDefaultedCall__Outputs {
    return new ClaimDefaultedCall__Outputs(this);
  }
}

export class ClaimDefaultedCall__Inputs {
  _call: ClaimDefaultedCall;

  constructor(call: ClaimDefaultedCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimDefaultedCall__Outputs {
  _call: ClaimDefaultedCall;

  constructor(call: ClaimDefaultedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class ClaimRepaidCall extends ethereum.Call {
  get inputs(): ClaimRepaidCall__Inputs {
    return new ClaimRepaidCall__Inputs(this);
  }

  get outputs(): ClaimRepaidCall__Outputs {
    return new ClaimRepaidCall__Outputs(this);
  }
}

export class ClaimRepaidCall__Inputs {
  _call: ClaimRepaidCall;

  constructor(call: ClaimRepaidCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRepaidCall__Outputs {
  _call: ClaimRepaidCall;

  constructor(call: ClaimRepaidCall) {
    this._call = call;
  }
}

export class ClearRequestCall extends ethereum.Call {
  get inputs(): ClearRequestCall__Inputs {
    return new ClearRequestCall__Inputs(this);
  }

  get outputs(): ClearRequestCall__Outputs {
    return new ClearRequestCall__Outputs(this);
  }
}

export class ClearRequestCall__Inputs {
  _call: ClearRequestCall;

  constructor(call: ClearRequestCall) {
    this._call = call;
  }

  get reqID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get repayDirect_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get isCallback_(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ClearRequestCall__Outputs {
  _call: ClearRequestCall;

  constructor(call: ClearRequestCall) {
    this._call = call;
  }

  get loanID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateVotingCall extends ethereum.Call {
  get inputs(): DelegateVotingCall__Inputs {
    return new DelegateVotingCall__Inputs(this);
  }

  get outputs(): DelegateVotingCall__Outputs {
    return new DelegateVotingCall__Outputs(this);
  }
}

export class DelegateVotingCall__Inputs {
  _call: DelegateVotingCall;

  constructor(call: DelegateVotingCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateVotingCall__Outputs {
  _call: DelegateVotingCall;

  constructor(call: DelegateVotingCall) {
    this._call = call;
  }
}

export class ProvideNewTermsForRollCall extends ethereum.Call {
  get inputs(): ProvideNewTermsForRollCall__Inputs {
    return new ProvideNewTermsForRollCall__Inputs(this);
  }

  get outputs(): ProvideNewTermsForRollCall__Outputs {
    return new ProvideNewTermsForRollCall__Outputs(this);
  }
}

export class ProvideNewTermsForRollCall__Inputs {
  _call: ProvideNewTermsForRollCall;

  constructor(call: ProvideNewTermsForRollCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get interest_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get loanToCollateral_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get duration_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ProvideNewTermsForRollCall__Outputs {
  _call: ProvideNewTermsForRollCall;

  constructor(call: ProvideNewTermsForRollCall) {
    this._call = call;
  }
}

export class RepayLoanCall extends ethereum.Call {
  get inputs(): RepayLoanCall__Inputs {
    return new RepayLoanCall__Inputs(this);
  }

  get outputs(): RepayLoanCall__Outputs {
    return new RepayLoanCall__Outputs(this);
  }
}

export class RepayLoanCall__Inputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get repaid_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayLoanCall__Outputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RequestLoanCall extends ethereum.Call {
  get inputs(): RequestLoanCall__Inputs {
    return new RequestLoanCall__Inputs(this);
  }

  get outputs(): RequestLoanCall__Outputs {
    return new RequestLoanCall__Outputs(this);
  }
}

export class RequestLoanCall__Inputs {
  _call: RequestLoanCall;

  constructor(call: RequestLoanCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get interest_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get loanToCollateral_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get duration_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RequestLoanCall__Outputs {
  _call: RequestLoanCall;

  constructor(call: RequestLoanCall) {
    this._call = call;
  }

  get reqID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RescindRequestCall extends ethereum.Call {
  get inputs(): RescindRequestCall__Inputs {
    return new RescindRequestCall__Inputs(this);
  }

  get outputs(): RescindRequestCall__Outputs {
    return new RescindRequestCall__Outputs(this);
  }
}

export class RescindRequestCall__Inputs {
  _call: RescindRequestCall;

  constructor(call: RescindRequestCall) {
    this._call = call;
  }

  get reqID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RescindRequestCall__Outputs {
  _call: RescindRequestCall;

  constructor(call: RescindRequestCall) {
    this._call = call;
  }
}

export class RollLoanCall extends ethereum.Call {
  get inputs(): RollLoanCall__Inputs {
    return new RollLoanCall__Inputs(this);
  }

  get outputs(): RollLoanCall__Outputs {
    return new RollLoanCall__Outputs(this);
  }
}

export class RollLoanCall__Inputs {
  _call: RollLoanCall;

  constructor(call: RollLoanCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RollLoanCall__Outputs {
  _call: RollLoanCall;

  constructor(call: RollLoanCall) {
    this._call = call;
  }
}

export class SetDirectRepayCall extends ethereum.Call {
  get inputs(): SetDirectRepayCall__Inputs {
    return new SetDirectRepayCall__Inputs(this);
  }

  get outputs(): SetDirectRepayCall__Outputs {
    return new SetDirectRepayCall__Outputs(this);
  }
}

export class SetDirectRepayCall__Inputs {
  _call: SetDirectRepayCall;

  constructor(call: SetDirectRepayCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get direct_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetDirectRepayCall__Outputs {
  _call: SetDirectRepayCall;

  constructor(call: SetDirectRepayCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get loanID_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
