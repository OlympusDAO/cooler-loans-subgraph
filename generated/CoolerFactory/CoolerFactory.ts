// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClearRequest extends ethereum.Event {
  get params(): ClearRequest__Params {
    return new ClearRequest__Params(this);
  }
}

export class ClearRequest__Params {
  _event: ClearRequest;

  constructor(event: ClearRequest) {
    this._event = event;
  }

  get cooler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reqID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DefaultLoan extends ethereum.Event {
  get params(): DefaultLoan__Params {
    return new DefaultLoan__Params(this);
  }
}

export class DefaultLoan__Params {
  _event: DefaultLoan;

  constructor(event: DefaultLoan) {
    this._event = event;
  }

  get cooler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loanID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RepayLoan extends ethereum.Event {
  get params(): RepayLoan__Params {
    return new RepayLoan__Params(this);
  }
}

export class RepayLoan__Params {
  _event: RepayLoan;

  constructor(event: RepayLoan) {
    this._event = event;
  }

  get cooler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loanID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RequestLoan extends ethereum.Event {
  get params(): RequestLoan__Params {
    return new RequestLoan__Params(this);
  }
}

export class RequestLoan__Params {
  _event: RequestLoan;

  constructor(event: RequestLoan) {
    this._event = event;
  }

  get cooler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get debt(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get reqID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RescindRequest extends ethereum.Event {
  get params(): RescindRequest__Params {
    return new RescindRequest__Params(this);
  }
}

export class RescindRequest__Params {
  _event: RescindRequest;

  constructor(event: RescindRequest) {
    this._event = event;
  }

  get cooler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reqID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RollLoan extends ethereum.Event {
  get params(): RollLoan__Params {
    return new RollLoan__Params(this);
  }
}

export class RollLoan__Params {
  _event: RollLoan;

  constructor(event: RollLoan) {
    this._event = event;
  }

  get cooler(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loanID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CoolerFactory extends ethereum.SmartContract {
  static bind(address: Address): CoolerFactory {
    return new CoolerFactory("CoolerFactory", address);
  }

  coolerImplementation(): Address {
    let result = super.call(
      "coolerImplementation",
      "coolerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_coolerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coolerImplementation",
      "coolerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coolersFor(param0: Address, param1: Address, param2: BigInt): Address {
    let result = super.call(
      "coolersFor",
      "coolersFor(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_coolersFor(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coolersFor",
      "coolersFor(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  created(param0: Address): boolean {
    let result = super.call("created", "created(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_created(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("created", "created(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  generateCooler(collateral_: Address, debt_: Address): Address {
    let result = super.call(
      "generateCooler",
      "generateCooler(address,address):(address)",
      [
        ethereum.Value.fromAddress(collateral_),
        ethereum.Value.fromAddress(debt_)
      ]
    );

    return result[0].toAddress();
  }

  try_generateCooler(
    collateral_: Address,
    debt_: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "generateCooler",
      "generateCooler(address,address):(address)",
      [
        ethereum.Value.fromAddress(collateral_),
        ethereum.Value.fromAddress(debt_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GenerateCoolerCall extends ethereum.Call {
  get inputs(): GenerateCoolerCall__Inputs {
    return new GenerateCoolerCall__Inputs(this);
  }

  get outputs(): GenerateCoolerCall__Outputs {
    return new GenerateCoolerCall__Outputs(this);
  }
}

export class GenerateCoolerCall__Inputs {
  _call: GenerateCoolerCall;

  constructor(call: GenerateCoolerCall) {
    this._call = call;
  }

  get collateral_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get debt_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GenerateCoolerCall__Outputs {
  _call: GenerateCoolerCall;

  constructor(call: GenerateCoolerCall) {
    this._call = call;
  }

  get cooler(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewEventCall extends ethereum.Call {
  get inputs(): NewEventCall__Inputs {
    return new NewEventCall__Inputs(this);
  }

  get outputs(): NewEventCall__Outputs {
    return new NewEventCall__Outputs(this);
  }
}

export class NewEventCall__Inputs {
  _call: NewEventCall;

  constructor(call: NewEventCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ev_(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amount_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class NewEventCall__Outputs {
  _call: NewEventCall;

  constructor(call: NewEventCall) {
    this._call = call;
  }
}
