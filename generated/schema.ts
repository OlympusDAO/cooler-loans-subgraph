// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class ClearinghouseSingleton extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClearinghouseSingleton entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClearinghouseSingleton must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ClearinghouseSingleton", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ClearinghouseSingleton | null {
    return changetype<ClearinghouseSingleton | null>(
      store.get_in_block("ClearinghouseSingleton", id),
    );
  }

  static load(id: string): ClearinghouseSingleton | null {
    return changetype<ClearinghouseSingleton | null>(
      store.get("ClearinghouseSingleton", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clearinghouses(): ClearinghouseLoader {
    return new ClearinghouseLoader(
      "ClearinghouseSingleton",
      this.get("id")!.toString(),
      "clearinghouses",
    );
  }
}

export class Clearinghouse extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Clearinghouse entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Clearinghouse must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Clearinghouse", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Clearinghouse | null {
    return changetype<Clearinghouse | null>(
      store.get_in_block("Clearinghouse", id),
    );
  }

  static load(id: string): Clearinghouse | null {
    return changetype<Clearinghouse | null>(store.get("Clearinghouse", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get version(): string {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get singleton(): string {
    let value = this.get("singleton");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set singleton(value: string) {
    this.set("singleton", Value.fromString(value));
  }

  get coolerFactoryAddress(): Bytes {
    let value = this.get("coolerFactoryAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set coolerFactoryAddress(value: Bytes) {
    this.set("coolerFactoryAddress", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get collateralTokenDecimals(): i32 {
    let value = this.get("collateralTokenDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set collateralTokenDecimals(value: i32) {
    this.set("collateralTokenDecimals", Value.fromI32(value));
  }

  get reserveToken(): Bytes {
    let value = this.get("reserveToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set reserveToken(value: Bytes) {
    this.set("reserveToken", Value.fromBytes(value));
  }

  get reserveTokenDecimals(): i32 {
    let value = this.get("reserveTokenDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set reserveTokenDecimals(value: i32) {
    this.set("reserveTokenDecimals", Value.fromI32(value));
  }

  get sReserveToken(): Bytes {
    let value = this.get("sReserveToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sReserveToken(value: Bytes) {
    this.set("sReserveToken", Value.fromBytes(value));
  }

  get sReserveTokenDecimals(): i32 {
    let value = this.get("sReserveTokenDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sReserveTokenDecimals(value: i32) {
    this.set("sReserveTokenDecimals", Value.fromI32(value));
  }

  get interestRate(): BigDecimal {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestRate(value: BigDecimal) {
    this.set("interestRate", Value.fromBigDecimal(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get fundCadence(): BigInt {
    let value = this.get("fundCadence");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundCadence(value: BigInt) {
    this.set("fundCadence", Value.fromBigInt(value));
  }

  get fundAmount(): BigDecimal {
    let value = this.get("fundAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set fundAmount(value: BigDecimal) {
    this.set("fundAmount", Value.fromBigDecimal(value));
  }

  get loanToCollateral(): BigDecimal {
    let value = this.get("loanToCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set loanToCollateral(value: BigDecimal) {
    this.set("loanToCollateral", Value.fromBigDecimal(value));
  }

  get loans(): CoolerLoanLoader {
    return new CoolerLoanLoader(
      "Clearinghouse",
      this.get("id")!.toString(),
      "loans",
    );
  }

  get snapshots(): ClearinghouseSnapshotLoader {
    return new ClearinghouseSnapshotLoader(
      "Clearinghouse",
      this.get("id")!.toString(),
      "snapshots",
    );
  }
}

export class CoolerLoanRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CoolerLoanRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CoolerLoanRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CoolerLoanRequest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CoolerLoanRequest | null {
    return changetype<CoolerLoanRequest | null>(
      store.get_in_block("CoolerLoanRequest", id),
    );
  }

  static load(id: string): CoolerLoanRequest | null {
    return changetype<CoolerLoanRequest | null>(
      store.get("CoolerLoanRequest", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdTransaction(): Bytes {
    let value = this.get("createdTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdTransaction(value: Bytes) {
    this.set("createdTransaction", Value.fromBytes(value));
  }

  get cooler(): Bytes {
    let value = this.get("cooler");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set cooler(value: Bytes) {
    this.set("cooler", Value.fromBytes(value));
  }

  get requestId(): BigInt {
    let value = this.get("requestId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt) {
    this.set("requestId", Value.fromBigInt(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get debtToken(): Bytes {
    let value = this.get("debtToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set debtToken(value: Bytes) {
    this.set("debtToken", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get interestPercentage(): BigDecimal {
    let value = this.get("interestPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestPercentage(value: BigDecimal) {
    this.set("interestPercentage", Value.fromBigDecimal(value));
  }

  get loanToCollateralRatio(): BigDecimal {
    let value = this.get("loanToCollateralRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set loanToCollateralRatio(value: BigDecimal) {
    this.set("loanToCollateralRatio", Value.fromBigDecimal(value));
  }

  get durationSeconds(): BigInt {
    let value = this.get("durationSeconds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set durationSeconds(value: BigInt) {
    this.set("durationSeconds", Value.fromBigInt(value));
  }

  get isRescinded(): boolean {
    let value = this.get("isRescinded");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isRescinded(value: boolean) {
    this.set("isRescinded", Value.fromBoolean(value));
  }

  get requestEvents(): RequestLoanEventLoader {
    return new RequestLoanEventLoader(
      "CoolerLoanRequest",
      this.get("id")!.toString(),
      "requestEvents",
    );
  }

  get rescindEvents(): RescindLoanRequestEventLoader {
    return new RescindLoanRequestEventLoader(
      "CoolerLoanRequest",
      this.get("id")!.toString(),
      "rescindEvents",
    );
  }

  get clearEvents(): ClearLoanRequestEventLoader {
    return new ClearLoanRequestEventLoader(
      "CoolerLoanRequest",
      this.get("id")!.toString(),
      "clearEvents",
    );
  }

  get loans(): CoolerLoanLoader {
    return new CoolerLoanLoader(
      "CoolerLoanRequest",
      this.get("id")!.toString(),
      "loans",
    );
  }
}

export class CoolerLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CoolerLoan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CoolerLoan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CoolerLoan", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CoolerLoan | null {
    return changetype<CoolerLoan | null>(store.get_in_block("CoolerLoan", id));
  }

  static load(id: string): CoolerLoan | null {
    return changetype<CoolerLoan | null>(store.get("CoolerLoan", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdTransaction(): Bytes {
    let value = this.get("createdTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdTransaction(value: Bytes) {
    this.set("createdTransaction", Value.fromBytes(value));
  }

  get cooler(): Bytes {
    let value = this.get("cooler");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set cooler(value: Bytes) {
    this.set("cooler", Value.fromBytes(value));
  }

  get request(): string {
    let value = this.get("request");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set request(value: string) {
    this.set("request", Value.fromString(value));
  }

  get loanId(): BigInt {
    let value = this.get("loanId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set loanId(value: BigInt) {
    this.set("loanId", Value.fromBigInt(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get clearinghouse(): string {
    let value = this.get("clearinghouse");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouse(value: string) {
    this.set("clearinghouse", Value.fromString(value));
  }

  get interest(): BigDecimal {
    let value = this.get("interest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interest(value: BigDecimal) {
    this.set("interest", Value.fromBigDecimal(value));
  }

  get principal(): BigDecimal {
    let value = this.get("principal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set principal(value: BigDecimal) {
    this.set("principal", Value.fromBigDecimal(value));
  }

  get collateral(): BigDecimal {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateral(value: BigDecimal) {
    this.set("collateral", Value.fromBigDecimal(value));
  }

  get expiryTimestamp(): BigInt {
    let value = this.get("expiryTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiryTimestamp(value: BigInt) {
    this.set("expiryTimestamp", Value.fromBigInt(value));
  }

  get hasCallback(): boolean {
    let value = this.get("hasCallback");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasCallback(value: boolean) {
    this.set("hasCallback", Value.fromBoolean(value));
  }

  get creationEvents(): ClearLoanRequestEventLoader {
    return new ClearLoanRequestEventLoader(
      "CoolerLoan",
      this.get("id")!.toString(),
      "creationEvents",
    );
  }

  get defaultedClaimEvents(): ClaimDefaultedLoanEventLoader {
    return new ClaimDefaultedLoanEventLoader(
      "CoolerLoan",
      this.get("id")!.toString(),
      "defaultedClaimEvents",
    );
  }

  get repaymentEvents(): RepayLoanEventLoader {
    return new RepayLoanEventLoader(
      "CoolerLoan",
      this.get("id")!.toString(),
      "repaymentEvents",
    );
  }

  get extendEvents(): ExtendLoanEventLoader {
    return new ExtendLoanEventLoader(
      "CoolerLoan",
      this.get("id")!.toString(),
      "extendEvents",
    );
  }
}

export class ClearinghouseSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClearinghouseSnapshot entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClearinghouseSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ClearinghouseSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ClearinghouseSnapshot | null {
    return changetype<ClearinghouseSnapshot | null>(
      store.get_in_block("ClearinghouseSnapshot", id),
    );
  }

  static load(id: string): ClearinghouseSnapshot | null {
    return changetype<ClearinghouseSnapshot | null>(
      store.get("ClearinghouseSnapshot", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get clearinghouse(): string {
    let value = this.get("clearinghouse");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouse(value: string) {
    this.set("clearinghouse", Value.fromString(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get nextRebalanceTimestamp(): BigInt {
    let value = this.get("nextRebalanceTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nextRebalanceTimestamp(value: BigInt) {
    this.set("nextRebalanceTimestamp", Value.fromBigInt(value));
  }

  get interestReceivables(): BigDecimal {
    let value = this.get("interestReceivables");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestReceivables(value: BigDecimal) {
    this.set("interestReceivables", Value.fromBigDecimal(value));
  }

  get principalReceivables(): BigDecimal {
    let value = this.get("principalReceivables");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set principalReceivables(value: BigDecimal) {
    this.set("principalReceivables", Value.fromBigDecimal(value));
  }

  get reserveToken(): Bytes {
    let value = this.get("reserveToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set reserveToken(value: Bytes) {
    this.set("reserveToken", Value.fromBytes(value));
  }

  get sReserveToken(): Bytes {
    let value = this.get("sReserveToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sReserveToken(value: Bytes) {
    this.set("sReserveToken", Value.fromBytes(value));
  }

  get reserveBalance(): BigDecimal {
    let value = this.get("reserveBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set reserveBalance(value: BigDecimal) {
    this.set("reserveBalance", Value.fromBigDecimal(value));
  }

  get sReserveBalance(): BigDecimal {
    let value = this.get("sReserveBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set sReserveBalance(value: BigDecimal) {
    this.set("sReserveBalance", Value.fromBigDecimal(value));
  }

  get sReserveInReserveBalance(): BigDecimal {
    let value = this.get("sReserveInReserveBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set sReserveInReserveBalance(value: BigDecimal) {
    this.set("sReserveInReserveBalance", Value.fromBigDecimal(value));
  }

  get treasuryReserveBalance(): BigDecimal {
    let value = this.get("treasuryReserveBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set treasuryReserveBalance(value: BigDecimal) {
    this.set("treasuryReserveBalance", Value.fromBigDecimal(value));
  }

  get treasurySReserveBalance(): BigDecimal {
    let value = this.get("treasurySReserveBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set treasurySReserveBalance(value: BigDecimal) {
    this.set("treasurySReserveBalance", Value.fromBigDecimal(value));
  }

  get treasurySReserveInReserveBalance(): BigDecimal {
    let value = this.get("treasurySReserveInReserveBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set treasurySReserveInReserveBalance(value: BigDecimal) {
    this.set("treasurySReserveInReserveBalance", Value.fromBigDecimal(value));
  }

  get rebalanceEvents(): RebalanceEventLoader {
    return new RebalanceEventLoader(
      "ClearinghouseSnapshot",
      this.get("id")!.toString(),
      "rebalanceEvents",
    );
  }

  get defundEvents(): DefundEventLoader {
    return new DefundEventLoader(
      "ClearinghouseSnapshot",
      this.get("id")!.toString(),
      "defundEvents",
    );
  }

  get creationEvents(): ClearLoanRequestEventLoader {
    return new ClearLoanRequestEventLoader(
      "ClearinghouseSnapshot",
      this.get("id")!.toString(),
      "creationEvents",
    );
  }

  get defaultedClaimEvents(): ClaimDefaultedLoanEventLoader {
    return new ClaimDefaultedLoanEventLoader(
      "ClearinghouseSnapshot",
      this.get("id")!.toString(),
      "defaultedClaimEvents",
    );
  }

  get repaymentEvents(): RepayLoanEventLoader {
    return new RepayLoanEventLoader(
      "ClearinghouseSnapshot",
      this.get("id")!.toString(),
      "repaymentEvents",
    );
  }

  get extendEvents(): ExtendLoanEventLoader {
    return new ExtendLoanEventLoader(
      "ClearinghouseSnapshot",
      this.get("id")!.toString(),
      "extendEvents",
    );
  }
}

export class RebalanceEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RebalanceEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RebalanceEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RebalanceEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RebalanceEvent | null {
    return changetype<RebalanceEvent | null>(
      store.get_in_block("RebalanceEvent", id),
    );
  }

  static load(id: string): RebalanceEvent | null {
    return changetype<RebalanceEvent | null>(store.get("RebalanceEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get clearinghouse(): string {
    let value = this.get("clearinghouse");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouse(value: string) {
    this.set("clearinghouse", Value.fromString(value));
  }

  get clearinghouseSnapshot(): string {
    let value = this.get("clearinghouseSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouseSnapshot(value: string) {
    this.set("clearinghouseSnapshot", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class DefundEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DefundEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DefundEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DefundEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DefundEvent | null {
    return changetype<DefundEvent | null>(
      store.get_in_block("DefundEvent", id),
    );
  }

  static load(id: string): DefundEvent | null {
    return changetype<DefundEvent | null>(store.get("DefundEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get clearinghouse(): string {
    let value = this.get("clearinghouse");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouse(value: string) {
    this.set("clearinghouse", Value.fromString(value));
  }

  get clearinghouseSnapshot(): string {
    let value = this.get("clearinghouseSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouseSnapshot(value: string) {
    this.set("clearinghouseSnapshot", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class RequestLoanEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RequestLoanEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RequestLoanEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RequestLoanEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RequestLoanEvent | null {
    return changetype<RequestLoanEvent | null>(
      store.get_in_block("RequestLoanEvent", id),
    );
  }

  static load(id: string): RequestLoanEvent | null {
    return changetype<RequestLoanEvent | null>(
      store.get("RequestLoanEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get request(): string {
    let value = this.get("request");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set request(value: string) {
    this.set("request", Value.fromString(value));
  }
}

export class RescindLoanRequestEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RescindLoanRequestEvent entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RescindLoanRequestEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RescindLoanRequestEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RescindLoanRequestEvent | null {
    return changetype<RescindLoanRequestEvent | null>(
      store.get_in_block("RescindLoanRequestEvent", id),
    );
  }

  static load(id: string): RescindLoanRequestEvent | null {
    return changetype<RescindLoanRequestEvent | null>(
      store.get("RescindLoanRequestEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get request(): string {
    let value = this.get("request");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set request(value: string) {
    this.set("request", Value.fromString(value));
  }
}

export class ClearLoanRequestEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClearLoanRequestEvent entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClearLoanRequestEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ClearLoanRequestEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ClearLoanRequestEvent | null {
    return changetype<ClearLoanRequestEvent | null>(
      store.get_in_block("ClearLoanRequestEvent", id),
    );
  }

  static load(id: string): ClearLoanRequestEvent | null {
    return changetype<ClearLoanRequestEvent | null>(
      store.get("ClearLoanRequestEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get request(): string {
    let value = this.get("request");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set request(value: string) {
    this.set("request", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get clearinghouseSnapshot(): string {
    let value = this.get("clearinghouseSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouseSnapshot(value: string) {
    this.set("clearinghouseSnapshot", Value.fromString(value));
  }
}

export class ClaimDefaultedLoanEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClaimDefaultedLoanEvent entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimDefaultedLoanEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ClaimDefaultedLoanEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ClaimDefaultedLoanEvent | null {
    return changetype<ClaimDefaultedLoanEvent | null>(
      store.get_in_block("ClaimDefaultedLoanEvent", id),
    );
  }

  static load(id: string): ClaimDefaultedLoanEvent | null {
    return changetype<ClaimDefaultedLoanEvent | null>(
      store.get("ClaimDefaultedLoanEvent", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get collateralQuantityClaimed(): BigDecimal {
    let value = this.get("collateralQuantityClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralQuantityClaimed(value: BigDecimal) {
    this.set("collateralQuantityClaimed", Value.fromBigDecimal(value));
  }

  get collateralPrice(): BigDecimal {
    let value = this.get("collateralPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralPrice(value: BigDecimal) {
    this.set("collateralPrice", Value.fromBigDecimal(value));
  }

  get collateralValueClaimed(): BigDecimal {
    let value = this.get("collateralValueClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralValueClaimed(value: BigDecimal) {
    this.set("collateralValueClaimed", Value.fromBigDecimal(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get secondsSinceExpiry(): BigInt {
    let value = this.get("secondsSinceExpiry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set secondsSinceExpiry(value: BigInt) {
    this.set("secondsSinceExpiry", Value.fromBigInt(value));
  }

  get clearinghouseSnapshot(): string {
    let value = this.get("clearinghouseSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouseSnapshot(value: string) {
    this.set("clearinghouseSnapshot", Value.fromString(value));
  }
}

export class RepayLoanEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RepayLoanEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RepayLoanEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RepayLoanEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RepayLoanEvent | null {
    return changetype<RepayLoanEvent | null>(
      store.get_in_block("RepayLoanEvent", id),
    );
  }

  static load(id: string): RepayLoanEvent | null {
    return changetype<RepayLoanEvent | null>(store.get("RepayLoanEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get amountPaid(): BigDecimal {
    let value = this.get("amountPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountPaid(value: BigDecimal) {
    this.set("amountPaid", Value.fromBigDecimal(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get secondsToExpiry(): BigInt {
    let value = this.get("secondsToExpiry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set secondsToExpiry(value: BigInt) {
    this.set("secondsToExpiry", Value.fromBigInt(value));
  }

  get principalPayable(): BigDecimal {
    let value = this.get("principalPayable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set principalPayable(value: BigDecimal) {
    this.set("principalPayable", Value.fromBigDecimal(value));
  }

  get interestPayable(): BigDecimal {
    let value = this.get("interestPayable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestPayable(value: BigDecimal) {
    this.set("interestPayable", Value.fromBigDecimal(value));
  }

  get collateralDeposited(): BigDecimal {
    let value = this.get("collateralDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralDeposited(value: BigDecimal) {
    this.set("collateralDeposited", Value.fromBigDecimal(value));
  }

  get clearinghouseSnapshot(): string {
    let value = this.get("clearinghouseSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouseSnapshot(value: string) {
    this.set("clearinghouseSnapshot", Value.fromString(value));
  }
}

export class ExtendLoanEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExtendLoanEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExtendLoanEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExtendLoanEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ExtendLoanEvent | null {
    return changetype<ExtendLoanEvent | null>(
      store.get_in_block("ExtendLoanEvent", id),
    );
  }

  static load(id: string): ExtendLoanEvent | null {
    return changetype<ExtendLoanEvent | null>(store.get("ExtendLoanEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get periods(): i32 {
    let value = this.get("periods");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set periods(value: i32) {
    this.set("periods", Value.fromI32(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get expiryTimestamp(): BigInt {
    let value = this.get("expiryTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiryTimestamp(value: BigInt) {
    this.set("expiryTimestamp", Value.fromBigInt(value));
  }

  get interestDue(): BigDecimal {
    let value = this.get("interestDue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestDue(value: BigDecimal) {
    this.set("interestDue", Value.fromBigDecimal(value));
  }

  get clearinghouseSnapshot(): string {
    let value = this.get("clearinghouseSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set clearinghouseSnapshot(value: string) {
    this.set("clearinghouseSnapshot", Value.fromString(value));
  }
}

export class ClearinghouseLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Clearinghouse[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Clearinghouse[]>(value);
  }
}

export class CoolerLoanLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CoolerLoan[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CoolerLoan[]>(value);
  }
}

export class ClearinghouseSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ClearinghouseSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ClearinghouseSnapshot[]>(value);
  }
}

export class RequestLoanEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RequestLoanEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RequestLoanEvent[]>(value);
  }
}

export class RescindLoanRequestEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RescindLoanRequestEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RescindLoanRequestEvent[]>(value);
  }
}

export class ClearLoanRequestEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ClearLoanRequestEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ClearLoanRequestEvent[]>(value);
  }
}

export class ClaimDefaultedLoanEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ClaimDefaultedLoanEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ClaimDefaultedLoanEvent[]>(value);
  }
}

export class RepayLoanEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RepayLoanEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RepayLoanEvent[]>(value);
  }
}

export class ExtendLoanEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ExtendLoanEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ExtendLoanEvent[]>(value);
  }
}

export class RebalanceEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RebalanceEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RebalanceEvent[]>(value);
  }
}

export class DefundEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DefundEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DefundEvent[]>(value);
  }
}
